
 DESCRIPTION :
    MangaScrap is a web crawler witch downloads mangas and places them on your computer.
    It's main features are :
     - it's database : MangaScrap will remember what it downloaded and what needs to be downloaded
        The database is located in ~/.MangaScrap
     - it's local website : MangaScrap will generate a local website using everything it downloaded allowing
        you to browse your mangas offline

 INSTRUCTIONS :
    definitions :
        [data arguments compatible] : can use the second group of argument called data arguments
        [own arguments] : requires it's own set of arguments. Should there also be [data arguments], they
            will always be placed before
        [in database] : all elements must be in the database
        [not in database] : all elements must not be in the database
        [elements required] : the instruction cannot be run without at least an element

    [add]g [data arguments compatible] [elements required] [not in database]
        adds the listed elements to the database

    [update]g [data arguments compatible] [elements required] [in database]
        updates the listed elements
        MangaScrap will download the missing pages, delete the excess pages and re-generate the HTML

    [fast-update]g [data arguments compatible] [elements required] [in database]
        Works just like [update]g but ignores all elements with the 'Completed' status

    [download]g [data arguments compatible] [elements required] [not in database]
        first adds all the elements to the database and then downloads them
        equivalent of [add]g and then [update]g

    [html]g [data arguments compatible] [in database]
        MangaScrap will generate the HTML
        should no arguments be passed, only the manga indexes will be updated
        should [data arguments] be passed, all selected elements will have there HTML generated. The index is also generated

    [delete]g [data arguments compatible] [elements required] [in database]
        deletes the elements from the database and the files ( html + jpeg )

    [delete-db]g [data arguments compatible] [elements required] [in database]
        deletes the elements from the database only

    [_todo]g [data arguments compatible] [elements required] [in database]
        Downloads all missing pages for all the elements

    [clear]g [data arguments compatible] [elements required] [in database]
        Deletes all missing pages from the _todo database

    [output]g [data arguments compatible] [elements required]
        writes all of the element's name and site on the standard output
        mainly used for the [file]y [data argument] ( can be used to write a file containing all the selected elements )

    [details]g [data arguments compatible] [elements required] [in database]
        gives all of the available data on the element this includes anything that is available in the database

    [param]g [own arguments]
        Allows you to configure the way MangaScrap works.
        [param]g can take 3 arguments :

            [list]y
                Shows the status of all the current settings and there description

            [reset]y
                Resets all the values of all the parameters to there default configuration
                Will request a confirmation

            [set]y paramId newValue
                Allows you to set a new value to one of the parameters.
                Requires 2 arguments : the paramId and the new value
                The param ids can be found using [param]g [list]y
                note : changing the destination directory does NOT move the already downloaded elements

    [help]g
        [help]y will display these instructions

    [version]g
        displays the current version of MangaScrap witch can be found in utils/version.txt

    [data arguments]
        definition : the data arguments are the arguments that are used to get elements by [link]y, [id]y, [file]y, ...

        [all]y
            Selects all elements in the database

        [id]y name site
            Gets one element with the combination of the name and of the site.
            The name MUST be the one of the url

        [link]y link
            Gets one element with the complete link of the element

        [file]y fileName
            Gets all the element present in the file
            All the elements must be of the name + site format
            Empty lines are not a problem
            It is possible to place comments but the commented line MUST start with a #

        [query]y query
            Allows you to get elements from the database directly
            Currently just a placeholder

 EXAMPLES :

 ./MangaScrap.rb [add]g [id]y super_manga super_site
    adds 'super_manga' of 'super_site' to the database for future update

 ./MangaScrap.rb [add]g [file]y my_manga_list.txt
    adds all mangas of 'my_manga_list.txt' to the database for future update

 ./MangaScrap.rb [update]g [all]y
    updates all mangas in database

 ./MangaScrap.rb [update]g [file]y file.txt
    updates all mangas in file.txt

 ./MangaScrap.rb [param]g [set]y mp /home/toto/
    sets the path of the destination directory to /home/toto

 note : the instructions can also be chained

 ./MangaScrap.rb [version]g [add]g [file]y file.txt [update]g [all]y
    this will make MangaScrap display it's current version, add the content of file.txt to the database
    and then update everything

 note : MangaScrap is smart enough to allow names such as 'id' or 'update'

 ./MangaScrap.rb [add]g [id]y id mangafox [update]g [file]y update
    this will add the manga 'id' of mangafox and then will update all elements contained in the 'update' file


 Warning !
 The element's name is found in the url
 ex : "bleach" => http://mangafox.me/manga/bleach/ => "bleach"
 ex : "black clover" => http://mangafox.me/manga/black_clover/ => "black_clover"
 ex : "crepuscule" => http://mangafox.me/manga/crepuscule_yamchi/ => "crepuscule_yamchi"

 information concerning the display of the download :
 . => downloaded a page
 , => downloaded a page ( multiple of 10 )
 ; => downloaded a page ( multiple of 50 )
 X => could not download a page ( error, page placed in todo )
